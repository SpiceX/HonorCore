<?php
/*
 *
| |  | |
| |__| | ___  _ __   ___  _ __
|  __  |/ _ \| '_ \ / _ \| '__|
| |  | | (_) | | | | (_) | |
|_|  |_|\___/|_| |_|\___/|_|
 *
 * This program is private software: you can not redistribute it and/or modify
 * it under the terms of the GNUv3 Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketmineSmash
 *
*/
declare(strict_types=1);
namespace smash\core;

use pocketmine\plugin\PluginBase;
use pocketmine\Server;
use smash\core\AntiCheat\NoSpam\AntiSpammer;
use smash\core\Commands\HelpCommand;
use smash\core\Commands\OpCommand;
use smash\core\Commands\RankCommand;
use smash\core\Commands\VersionCommand;
use smash\core\Database\QueryManager;
use smash\core\EventHandler\GlobalHandler;
use smash\core\EventHandler\LobbyListener;
use smash\core\Reporter\Broadcast;
use smash\core\Reporter\Console;

class Core extends PluginBase
{
	public const PREFIX = "§7[§6Core§7]§r ";
	private static $plugin;

	public function onEnable()
	{
		$this->InitCore();
		Console::info("Activating nightmare core...");
		Console::info("Antispam enabled!");
		self::$plugin = $this;
		$this->registerEventList();
		QueryManager::Initiate();
		$this->unregisterCommands('help', 'op', 'say', 'me', 'version');
		$this->registerCommands();
		$this->getScheduler()->scheduleRepeatingTask(new Broadcast(), 20 * 66);
	}

	public function onLoad()
	{
		parent::onLoad(); // TODO: Change the autogenerated stub
	}

	public function onDisable()
	{
		parent::onDisable(); // TODO: Change the autogenerated stub
	}

	private function InitCore()
	{
		$folders = ['Log', 'Databases',];
		$resources = ['core.log', 'settings.conf', 'database.sq3','messages.yml',];
		foreach ($folders as $folder) {
			if (!is_dir($this->getDataFolder() . $folder)) {
				@mkdir($this->getDataFolder() . $folder);
			}
		}
		foreach ($resources as $resource) {
			$this->saveResource($resource);
		}
		rename($this->getDataFolder() . 'core.log', $this->getDataFolder() . 'Log' . DIRECTORY_SEPARATOR . 'core.log');
		if (!is_file($this->getDataFolder()."Databases/database.sq3")) {
			rename($this->getDataFolder() . 'database.sq3', $this->getDataFolder() . 'Databases' . DIRECTORY_SEPARATOR . 'database.sq3');
		} else {
			@unlink($this->getDataFolder()."database.sq3");
		}
		unset($resources);
		unset($folders);
	}

	public static function getPlugin(): Core
	{
		return self::$plugin;
	}

	private function registerEventList()
	{
		$listeners = [new LobbyListener(), new GlobalHandler(), new AntiSpammer()];
		foreach ($listeners as $listener) {
			$this->getServer()->getPluginManager()->registerEvents($listener, $this);
		}
	}

	public function unregisterCommands(string ...$commands)
	{
		$map = Server::getInstance()->getCommandMap();
		foreach ($commands as $cmd) {
			$command = $map->getCommand($cmd);
			if ($command !== null) {
				$command->setLabel("old_" . $cmd);
				$map->unregister($command);
			}
		}
	}

	public function registerCommands()
	{
		$this->getServer()->getCommandMap()->register('help', new HelpCommand(), 'help');
		$this->getServer()->getCommandMap()->register('rank', new RankCommand(), 'rank');
		$this->getServer()->getCommandMap()->register('op', new OpCommand(), 'op');
		$this->getServer()->getCommandMap()->register('version', new VersionCommand(), 'version');
	}

}